#blocked = #ttg.blocked<{sizePerThread = [1, 16], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4, 1], threadsPerWarp = [64, 1], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [64, 0], [128, 0], [0, 64], [0, 128]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[0, 16], [0, 32], [32, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 2], [0, 4], [64, 0], [128, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 1]], warp = [[0, 0], [0, 0], [32, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 2], [0, 4], [128, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 1]], warp = [[32, 0], [64, 0], [0, 0]], block = []}>
#loc = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 16, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 16, perPhase = 2, maxPhase = 8, order = [0, 1]}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_gemm_afp4_wfp4_kernel(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg4: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":16:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    // %cst = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    llvm.intr.assume %true : i1 loc(#loc2)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    %0 = tt.get_program_id x : i32 loc(#loc12)
    %1 = arith.addi %arg5, %c255_i32 : i32 loc(#loc72)
    %2 = arith.divsi %1, %c256_i32 : i32 loc(#loc73)
    %3 = arith.addi %arg6, %c255_i32 : i32 loc(#loc74)
    %4 = arith.divsi %3, %c256_i32 : i32 loc(#loc75)
    %5 = arith.muli %4, %c4_i32 : i32 loc(#loc76)
    %6 = arith.divsi %0, %5 : i32 loc(#loc77)
    %7 = arith.muli %6, %c4_i32 : i32 loc(#loc78)
    %8 = arith.subi %2, %7 : i32 loc(#loc79)
    %9 = arith.minsi %8, %c4_i32 : i32 loc(#loc80)
    %10 = arith.remsi %0, %9 : i32 loc(#loc81)
    %11 = arith.addi %7, %10 : i32 loc(#loc82)
    %12 = arith.remsi %0, %5 : i32 loc(#loc83)
    %13 = arith.divsi %12, %9 : i32 loc(#loc84)
    llvm.intr.assume %true : i1 loc(#loc27)
    llvm.intr.assume %true : i1 loc(#loc28)
    %14 = arith.muli %11, %c256_i32 : i32 loc(#loc29)
    %15 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %16 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc30)
    %17 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc30)
    %18 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc30)
    %19 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #linear}>> loc(#loc30)
    %20 = tt.splat %14 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %21 = tt.splat %14 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc31)
    %22 = arith.addi %20, %15 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %23 = arith.addi %21, %16 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc31)
    %24 = tt.splat %arg5 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc32)
    %25 = tt.splat %arg5 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc32)
    %26 = arith.remsi %22, %24 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc32)
    %27 = arith.remsi %23, %25 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc32)
    %28 = arith.muli %13, %c256_i32 : i32 loc(#loc33)
    %29 = tt.splat %28 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc34)
    %30 = tt.splat %28 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc34)
    %31 = arith.addi %29, %18 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc34)
    %32 = arith.addi %30, %16 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc34)
    %33 = tt.splat %arg6 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc35)
    %34 = tt.splat %arg6 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc35)
    %35 = arith.remsi %31, %33 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc35)
    %36 = arith.remsi %32, %34 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc35)
    %37 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc36)
    %38 = tt.expand_dims %26 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc37)
    %39 = tt.splat %arg8 : i32 -> tensor<256x1xi32, #blocked> loc(#loc37)
    %40 = arith.muli %38, %39 : tensor<256x1xi32, #blocked> loc(#loc37)
    %41 = tt.broadcast %40 : tensor<256x1xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc37)
    %42 = tt.expand_dims %37 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc37)
    %43 = tt.broadcast %42 : tensor<1x128xi32, #blocked> -> tensor<256x128xi32, #blocked> loc(#loc37)

    %44 = arith.addi %41, %43 : tensor<256x128xi32, #blocked> loc(#loc37)

    %offsetsA0 = amdgpu.extract_slice %44 [0, 0] : tensor<256x128xi32, #blocked> to tensor<128x128xi32, #blocked>
    %offsetsA1 = amdgpu.extract_slice %44 [128, 0] : tensor<256x128xi32, #blocked> to tensor<128x128xi32, #blocked>

    %45 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc38)
    %46 = tt.expand_dims %45 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc39)
    %47 = tt.broadcast %46 : tensor<128x1xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc39)
    %48 = tt.expand_dims %35 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc39)
    %49 = tt.splat %arg9 : i32 -> tensor<1x256xi32, #blocked2> loc(#loc39)
    %50 = arith.muli %48, %49 : tensor<1x256xi32, #blocked2> loc(#loc39)
    %51 = tt.broadcast %50 : tensor<1x256xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc39)
    %52 = arith.addi %47, %51 : tensor<128x256xi32, #blocked2> loc(#loc39)

    %offsetsB0 = amdgpu.extract_slice %52 [0, 0] : tensor<128x256xi32, #blocked2> to tensor<128x128xi32, #blocked2>
    %offsetsB1 = amdgpu.extract_slice %52 [0, 128] : tensor<128x256xi32, #blocked2> to tensor<128x128xi32, #blocked2>

    %53 = tt.expand_dims %27 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc40)
    %54 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc41)
    %55 = tt.broadcast %53 : tensor<256x1xi32, #blocked1> -> tensor<256x8xi32, #blocked1> loc(#loc42)
    %56 = tt.expand_dims %54 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x8xi32, #blocked1> loc(#loc42)
    %57 = tt.splat %arg11 : i32 -> tensor<1x8xi32, #blocked1> loc(#loc42)
    %58 = arith.muli %56, %57 : tensor<1x8xi32, #blocked1> loc(#loc42)
    %59 = tt.broadcast %58 : tensor<1x8xi32, #blocked1> -> tensor<256x8xi32, #blocked1> loc(#loc42)
    %60 = arith.addi %59, %55 : tensor<256x8xi32, #blocked1> loc(#loc42)
    %61 = tt.expand_dims %36 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc43)
    %62 = tt.broadcast %61 : tensor<256x1xi32, #blocked1> -> tensor<256x8xi32, #blocked1> loc(#loc44)
    %63 = tt.splat %arg12 : i32 -> tensor<1x8xi32, #blocked1> loc(#loc44)
    %64 = arith.muli %56, %63 : tensor<1x8xi32, #blocked1> loc(#loc44)
    %65 = tt.broadcast %64 : tensor<1x8xi32, #blocked1> -> tensor<256x8xi32, #blocked1> loc(#loc44)
    %66 = arith.addi %65, %62 : tensor<256x8xi32, #blocked1> loc(#loc44)
    %67 = arith.addi %arg7, %c127_i32 : i32 loc(#loc85)
    %68 = arith.divsi %67, %c128_i32 : i32 loc(#loc86)
    %69 = arith.muli %arg11, %c8_i32 : i32 loc(#loc46)
    %70 = arith.muli %arg12, %c8_i32 : i32 loc(#loc47)
    %71 = ttg.local_alloc : () -> !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> loc(#loc48)
    %72 = ttg.local_alloc : () -> !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> loc(#loc49)
    %73 = ttg.local_alloc : () -> !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> loc(#loc50)
    %74 = ttg.local_alloc : () -> !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> loc(#loc51)
    %75 = arith.cmpi sgt, %68, %c0_i32 : i32 loc(#loc52)
    %76 = ttg.memdesc_subview %73[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> loc(#loc50)
    %77 = tt.splat %75 : i1 -> tensor<256x8xi1, #blocked1> loc(#loc52)
    %78 = amdgpu.buffer_load_to_local %arg3[%60] mask = %77 stride = %arg11 into %76 : <i8>[tensor<256x8xi32, #blocked1>]  -> <256x8xi8, #shared2, #smem, mutable> loc(#loc50)
    %79 = ttg.async_commit_group %78 loc(#loc50)
    %80 = ttg.memdesc_subview %74[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> loc(#loc51)
    %81 = amdgpu.buffer_load_to_local %arg4[%66] mask = %77 stride = %arg12 into %80 : <i8>[tensor<256x8xi32, #blocked1>]  -> <256x8xi8, #shared2, #smem, mutable> loc(#loc51)
    %82 = ttg.async_commit_group %81 loc(#loc51)

    %83 = ttg.memdesc_subview %71[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<256x128xi8, #shared, #smem, mutable> loc(#loc48)


    %84 = tt.splat %75 : i1 -> tensor<256x128xi1, #blocked> loc(#loc52)
    %85 = amdgpu.buffer_load_to_local %arg0[%44] mask = %84 stride = %arg8 into %83 : <i8>[tensor<256x128xi32, #blocked>]  -> <256x128xi8, #shared, #smem, mutable> loc(#loc48)
    %86 = ttg.async_commit_group %85 loc(#loc48)

    %87 = ttg.memdesc_subview %72[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> loc(#loc49)

    %88 = tt.splat %75 : i1 -> tensor<128x256xi1, #blocked2> loc(#loc52)
    %89 = amdgpu.buffer_load_to_local %arg1[%52] mask = %88 stride = %arg9 into %87 : <i8>[tensor<128x256xi32, #blocked2>]  -> <128x256xi8, #shared1, #smem, mutable> loc(#loc49)
    %90 = ttg.async_commit_group %89 loc(#loc49)
    %91 = arith.subi %68, %c1_i32 : i32 loc(#loc52)

    %cst_tile_1 = arith.constant dense<-10.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    %cst_tile_2 = arith.constant dense<-10.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    %cst_tile_3 = arith.constant dense<-10.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    %cst_tile_4 = arith.constant dense<-10.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)

    %92:17 = scf.for %arg13 = %c0_i32 to %91 step %c1_i32 iter_args(%arg141 = %cst_tile_1, %arg142 = %cst_tile_2, %arg143 = %cst_tile_3, %arg144 = %cst_tile_4, %arg15 = %arg3, %arg16 = %arg4, %arg17 = %arg0, %arg18 = %arg1, %arg19 = %c0_i32, %arg20 = %79, %arg21 = %82, %arg22 = %86, %arg23 = %90, %arg24 = %76, %arg25 = %80, %arg26 = %83, %arg27 = %87) -> (
            // tensor<256x256xf32, #mma>,
            // !tt.ptr<i8>,
            // !tt.ptr<i8>,
            // !tt.ptr<i8>,
            // !tt.ptr<i8>,
            // i32,
            // !ttg.async.token,
            // !ttg.async.token,
            // !ttg.async.token,
            // !ttg.async.token,
            // !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>,
            // !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>,
            // !ttg.memdesc<128x128xi8, #shared, #smem, mutable>,
            // !ttg.memdesc<128x128xi8, #shared, #smem, mutable>,
            // !ttg.memdesc<128x128xi8, #shared1, #smem, mutable>,
            // !ttg.memdesc<128x128xi8, #shared1, #smem, mutable>
        tensor<128x128xf32, #mma>,
        tensor<128x128xf32, #mma>,
        tensor<128x128xf32, #mma>,
        tensor<128x128xf32, #mma>,
        !tt.ptr<i8>,
        !tt.ptr<i8>,
        !tt.ptr<i8>,
        !tt.ptr<i8>,
        i32,
        !ttg.async.token,
        !ttg.async.token,
        !ttg.async.token,
        !ttg.async.token,
        !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>,
        !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>,
        !ttg.memdesc<256x128xi8, #shared, #smem, mutable>,
        !ttg.memdesc<128x256xi8, #shared1, #smem, mutable>
            )  : i32 {

      %135 = ttg.async_wait %arg20, %arg21, %arg22, %arg23 {num = 0 : i32} loc(#loc50)
      %136 = tt.addptr %arg17, %c128_i32 : !tt.ptr<i8>, i32 loc(#loc53)
      %137 = tt.addptr %arg18, %c128_i32 : !tt.ptr<i8>, i32 loc(#loc54)
      %138 = tt.addptr %arg15, %69 : !tt.ptr<i8>, i32 loc(#loc55)
      %139 = tt.addptr %arg16, %70 : !tt.ptr<i8>, i32 loc(#loc56)
      %140 = arith.addi %arg19, %c1_i32 : i32 loc(#loc52)
      %141 = arith.cmpi slt, %140, %c2_i32 : i32 loc(#loc52)
      %142 = arith.select %141, %140, %c0_i32 : i32 loc(#loc52)

      //------------------
      // Prefetch scales
      //-----------------
      %143 = ttg.memdesc_subview %73[%142, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> loc(#loc50)
      %144 = amdgpu.buffer_load_to_local %138[%60] stride = %arg11 into %143 : <i8>[tensor<256x8xi32, #blocked1>]  -> <256x8xi8, #shared2, #smem, mutable> loc(#loc50)
      %145 = ttg.async_commit_group %144 loc(#loc50)
      %147 = ttg.memdesc_subview %74[%142, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> loc(#loc51)
      %148 = amdgpu.buffer_load_to_local %139[%66] stride = %arg12 into %147 : <i8>[tensor<256x8xi32, #blocked1>]  -> <256x8xi8, #shared2, #smem, mutable> loc(#loc51)
      %149 = ttg.async_commit_group %148 loc(#loc51)

      // Load A
      %151 = ttg.memdesc_subview %71[%142, %c0_i32, %c0_i32] : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<256x128xi8, #shared, #smem, mutable> loc(#loc48)
      //------------------
      // AsyncCopy A0
      //------------------
      %1511 = ttg.memdesc_subview %151[%c0_i32, %c0_i32] : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared, #smem, mutable>
      %1521 = amdgpu.buffer_load_to_local %136[%offsetsA0] stride = %arg8 into %1511 : <i8>[tensor<128x128xi32, #blocked>]  -> <128x128xi8, #shared, #smem, mutable> loc(#loc48)
      //------------------
      // AsyncCopy A1
      //------------------
      %1512 = ttg.memdesc_subview %151[%c128_i32, %c0_i32] : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared, #smem, mutable>
      %1522 = amdgpu.buffer_load_to_local %136[%offsetsA1] stride = %arg8 into %1512 : <i8>[tensor<128x128xi32, #blocked>]  -> <128x128xi8, #shared, #smem, mutable> loc(#loc48)

      // Combine both for now, for pingpong we need to loop carried both separately
      %153 = ttg.async_commit_group %1521, %1522 loc(#loc48)

      %155 = ttg.memdesc_subview %72[%142, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> loc(#loc49)
      //------------------
      // AsyncCopy B0
      //------------------
      %1551 = ttg.memdesc_subview %155[%c0_i32, %c0_i32] : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared1, #smem, mutable>
      %1561 = amdgpu.buffer_load_to_local %137[%offsetsB0] stride = %arg9 into %1551 : <i8>[tensor<128x128xi32, #blocked2>]  -> <128x128xi8, #shared1, #smem, mutable> loc(#loc49)
      //------------------
      // AsyncCopy B1
      //------------------
      %1552 = ttg.memdesc_subview %155[%c128_i32, %c0_i32] : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared1, #smem, mutable>
      %1562 = amdgpu.buffer_load_to_local %137[%offsetsB1] stride = %arg9 into %1552 : <i8>[tensor<128x128xi32, #blocked2>]  -> <128x128xi8, #shared1, #smem, mutable> loc(#loc49)

      // Combine both for now, for pingpong we need to loop carried both separately
      %157 = ttg.async_commit_group %1561, %1562 loc(#loc48)

      //------------------
      // LocalLoad Scales
      //------------------
      %ldsViewScaleA0 = ttg.memdesc_subview %arg24[%c0_i32, %c0_i32] : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<128x8xi8, #shared2, #smem, mutable>
      %ldsViewScaleA1 = ttg.memdesc_subview %arg24[%c128_i32, %c0_i32] : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<128x8xi8, #shared2, #smem, mutable>

      %scaleA1 = ttg.local_load %ldsViewScaleA0 token %135 : !ttg.memdesc<128x8xi8, #shared2, #smem, mutable> -> tensor<128x8xi8, #linear1> loc(#loc50)
      %scaleA2 = ttg.local_load %ldsViewScaleA1 token %135 : !ttg.memdesc<128x8xi8, #shared2, #smem, mutable> -> tensor<128x8xi8, #linear1> loc(#loc50)

      %ldsViewScaleB0 = ttg.memdesc_subview %arg25[%c0_i32, %c0_i32] : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<128x8xi8, #shared2, #smem, mutable>
      %ldsViewScaleB1 = ttg.memdesc_subview %arg25[%c128_i32, %c0_i32] : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> !ttg.memdesc<128x8xi8, #shared2, #smem, mutable>

      %scaleB1 = ttg.local_load %ldsViewScaleB0 token %135 : !ttg.memdesc<128x8xi8, #shared2, #smem, mutable> -> tensor<128x8xi8, #linear2> loc(#loc51)
      %scaleB2 = ttg.local_load %ldsViewScaleB1 token %135 : !ttg.memdesc<128x8xi8, #shared2, #smem, mutable> -> tensor<128x8xi8, #linear2> loc(#loc51)

      //------------------
      // Local load A0
      //------------------
      %ldsLoadA1 = ttg.memdesc_subview %arg26[%c0_i32, %c0_i32] : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared, #smem, mutable>
      %tileA1 = ttg.local_load %ldsLoadA1 token %135 : !ttg.memdesc<128x128xi8, #shared, #smem, mutable> -> tensor<128x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc48)
      //------------------
      // Local load A1
      //------------------
      %ldsLoadA2 = ttg.memdesc_subview %arg26[%c128_i32, %c0_i32] : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared, #smem, mutable>
      %tileA2 = ttg.local_load %ldsLoadA2 token %135 : !ttg.memdesc<128x128xi8, #shared, #smem, mutable> -> tensor<128x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc48)

      //------------------
      // Local load B0
      //------------------
      %ldsLoadB1 = ttg.memdesc_subview %arg27[%c0_i32, %c0_i32] : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared1, #smem, mutable>
      %tileB1 = ttg.local_load %ldsLoadB1 token %135 : !ttg.memdesc<128x128xi8, #shared1, #smem, mutable> -> tensor<128x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc49)

      //------------------
      // Local load B1
      //------------------
      %ldsLoadB2 = ttg.memdesc_subview %arg27[%c0_i32, %c128_i32] : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xi8, #shared1, #smem, mutable>
      %tileB2 = ttg.local_load %ldsLoadB2 token %135 : !ttg.memdesc<128x128xi8, #shared1, #smem, mutable> -> tensor<128x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc49)

      //------------------
      // Dot slice1 A1 * B1
      //------------------
      %1591 = tt.dot_scaled %tileA1 scale %scaleA1, %tileB1 scale %scaleB1, %arg141 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<128x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<128x8xi8, #linear1> * tensor<128x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<128x8xi8, #linear2> -> tensor<128x128xf32, #mma> loc(#loc57)

      //------------------
      // Dot slice2 A2 * B1
      //------------------
      %1592 = tt.dot_scaled %tileA2 scale %scaleA2, %tileB1 scale %scaleB1, %arg143 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<128x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<128x8xi8, #linear1> * tensor<128x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<128x8xi8, #linear2> -> tensor<128x128xf32, #mma> loc(#loc57)

      //------------------
      // Dot slice2 A1 * B2
      //------------------
      %1593 = tt.dot_scaled %tileA1 scale %scaleA1, %tileB2 scale %scaleB2, %arg142 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<128x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<128x8xi8, #linear1> * tensor<128x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<128x8xi8, #linear2> -> tensor<128x128xf32, #mma> loc(#loc57)

      //------------------
      // Dot slice3 A2*B2
      //------------------
      %1594 = tt.dot_scaled %tileA2 scale %scaleA2, %tileB2 scale %scaleB2, %arg144 lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<128x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<128x8xi8, #linear1> * tensor<128x128xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<128x8xi8, #linear2> -> tensor<128x128xf32, #mma> loc(#loc57)

      scf.yield %1591, %1592, %1593, %1594, %138, %139, %136, %137, %142, %145, %149, %153, %157, %143, %147, %151, %155 :
        tensor<128x128xf32, #mma>,
        tensor<128x128xf32, #mma>,
        tensor<128x128xf32, #mma>,
        tensor<128x128xf32, #mma>,
        !tt.ptr<i8>,
        !tt.ptr<i8>,
        !tt.ptr<i8>,
        !tt.ptr<i8>,
        i32,
        !ttg.async.token,
        !ttg.async.token,
        !ttg.async.token,
        !ttg.async.token,
        !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>,
        !ttg.memdesc<256x8xi8, #shared2, #smem, mutable>,
        !ttg.memdesc<256x128xi8, #shared, #smem, mutable>,
        !ttg.memdesc<128x256xi8, #shared1, #smem, mutable>
    } loc(#loc52)

    // Combine dot slices
    %dot_result = amdgpu.concat %92#0, %92#1, %92#2, %92#3 :
      tensor<128x128xf32, #mma>,
      tensor<128x128xf32, #mma>,
      tensor<128x128xf32, #mma>,
      tensor<128x128xf32, #mma>
      -> tensor<256x256xf32, #mma>


    %93 = arith.cmpi sge, %68, %c1_i32 : i32 loc(#loc52)
    %94 = ttg.async_wait %92#9, %92#10, %92#11, %92#12 {num = 0 : i32} loc(#loc50)
    %95 = ttg.local_load %92#13 token %94 : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> tensor<256x8xi8, #linear1> loc(#loc50)
    %96 = ttg.local_load %92#14 token %94 : !ttg.memdesc<256x8xi8, #shared2, #smem, mutable> -> tensor<256x8xi8, #linear2> loc(#loc51)
    %97 = ttg.local_load %92#15 token %94 : !ttg.memdesc<256x128xi8, #shared, #smem, mutable> -> tensor<256x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc48)
    %98 = ttg.local_load %92#16 token %94 : !ttg.memdesc<128x256xi8, #shared1, #smem, mutable> -> tensor<128x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc49)
    %99 = scf.if %93 -> (tensor<256x256xf32, #mma>) {
      %135 = tt.dot_scaled %97 scale %95, %98 scale %96, %dot_result lhs = e2m1 rhs = e2m1 {fastMath = false} : tensor<256x128xi8, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<256x8xi8, #linear1> * tensor<128x256xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>, tensor<256x8xi8, #linear2> -> tensor<256x256xf32, #mma> loc(#loc57)
      scf.yield %135 : tensor<256x256xf32, #mma> loc(#loc57)
    } else {
      scf.yield %dot_result : tensor<256x256xf32, #mma> loc(#loc57)
    } loc(#loc57)
    %100 = arith.select %93, %99, %dot_result : tensor<256x256xf32, #mma> loc(#loc52)
    ttg.local_dealloc %71 : !ttg.memdesc<2x256x128xi8, #shared, #smem, mutable> loc(#loc52)
    ttg.local_dealloc %72 : !ttg.memdesc<2x128x256xi8, #shared1, #smem, mutable> loc(#loc52)
    ttg.local_dealloc %73 : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> loc(#loc52)
    ttg.local_dealloc %74 : !ttg.memdesc<2x256x8xi8, #shared2, #smem, mutable> loc(#loc52)
    %101 = arith.truncf %100 : tensor<256x256xf32, #mma> to tensor<256x256xbf16, #mma> loc(#loc58)
    %102 = arith.extsi %17 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #linear}>> to tensor<256xi64, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc59)
    %103 = arith.extsi %19 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #linear}>> to tensor<256xi64, #ttg.slice<{dim = 0, parent = #linear}>> loc(#loc59)
    %104 = arith.extsi %14 : i32 to i64 loc(#loc60)
    %105 = tt.splat %104 : i64 -> tensor<256xi64, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc60)
    %106 = arith.addi %105, %102 : tensor<256xi64, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc60)
    %107 = arith.extsi %28 : i32 to i64 loc(#loc61)
    %108 = tt.splat %107 : i64 -> tensor<256xi64, #ttg.slice<{dim = 0, parent = #linear}>> loc(#loc61)
    %109 = arith.addi %108, %103 : tensor<256xi64, #ttg.slice<{dim = 0, parent = #linear}>> loc(#loc61)
    %110 = tt.expand_dims %106 {axis = 1 : i32} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<256x1xi64, #linear> loc(#loc62)
    %111 = arith.extsi %arg10 : i32 to i64 loc(#loc63)
    %112 = tt.expand_dims %102 {axis = 1 : i32} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<256x1xi64, #linear> loc(#loc64)
    %113 = arith.muli %111, %104 : i64 loc(#loc64)
    %114 = tt.splat %111 : i64 -> tensor<256x1xi64, #linear> loc(#loc64)
    %115 = arith.muli %114, %112 : tensor<256x1xi64, #linear> loc(#loc64)
    %116 = tt.addptr %arg2, %113 : !tt.ptr<bf16>, i64 loc(#loc64)
    %117 = arith.trunci %115 : tensor<256x1xi64, #linear> to tensor<256x1xi32, #linear> loc(#loc64)
    %118 = tt.expand_dims %109 {axis = 0 : i32} : tensor<256xi64, #ttg.slice<{dim = 0, parent = #linear}>> -> tensor<1x256xi64, #linear> loc(#loc65)
    %119 = tt.broadcast %117 : tensor<256x1xi32, #linear> -> tensor<256x256xi32, #linear> loc(#loc66)
    %120 = tt.expand_dims %103 {axis = 0 : i32} : tensor<256xi64, #ttg.slice<{dim = 0, parent = #linear}>> -> tensor<1x256xi64, #linear> loc(#loc66)
    %121 = tt.broadcast %120 : tensor<1x256xi64, #linear> -> tensor<256x256xi64, #linear> loc(#loc66)
    %122 = tt.addptr %116, %107 : !tt.ptr<bf16>, i64 loc(#loc66)
    %123 = arith.trunci %121 : tensor<256x256xi64, #linear> to tensor<256x256xi32, #linear> loc(#loc66)
    %124 = arith.addi %123, %119 : tensor<256x256xi32, #linear> loc(#loc66)
    %125 = arith.extsi %arg5 : i32 to i64 loc(#loc67)
    %126 = tt.splat %125 : i64 -> tensor<256x1xi64, #linear> loc(#loc67)
    %127 = arith.cmpi slt, %110, %126 : tensor<256x1xi64, #linear> loc(#loc67)
    %128 = arith.extsi %arg6 : i32 to i64 loc(#loc68)
    %129 = tt.splat %128 : i64 -> tensor<1x256xi64, #linear> loc(#loc68)
    %130 = arith.cmpi slt, %118, %129 : tensor<1x256xi64, #linear> loc(#loc68)
    %131 = tt.broadcast %127 : tensor<256x1xi1, #linear> -> tensor<256x256xi1, #linear> loc(#loc69)
    %132 = tt.broadcast %130 : tensor<1x256xi1, #linear> -> tensor<256x256xi1, #linear> loc(#loc69)
    %133 = arith.andi %131, %132 : tensor<256x256xi1, #linear> loc(#loc69)
    %134 = ttg.convert_layout %101 : tensor<256x256xbf16, #mma> -> tensor<256x256xbf16, #linear> loc(#loc58)
    amdgpu.buffer_store %134, %122[%124], %133 : tensor<256x256xbf16, #linear> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":49:14)
#loc3 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":50:14)
#loc4 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":51:14)
#loc5 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":52:14)
#loc6 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":53:14)
#loc7 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":54:14)
#loc8 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":55:14)
#loc9 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":56:14)
#loc10 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":57:14)
#loc11 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":58:14)
#loc12 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":63:24)
#loc13 = loc("/home/aweinrau/triton/python/triton/language/standard.py":40:22)
#loc14 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":64:27)
#loc15 = loc("/home/aweinrau/triton/python/triton/language/standard.py":40:28)
#loc16 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":65:27)
#loc17 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":41:42)
#loc18 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":69:44)
#loc19 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":42:26)
#loc20 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":43:33)
#loc21 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":44:39)
#loc22 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":44:52)
#loc23 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":45:37)
#loc24 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":45:31)
#loc25 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":46:23)
#loc26 = loc("/home/aweinrau/aiter/aiter/ops/triton/utils/pid_preprocessing.py":46:44)
#loc27 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":71:14)
#loc28 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":72:14)
#loc29 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:23)
#loc30 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:51)
#loc31 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:38)
#loc32 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":79:68)
#loc33 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:23)
#loc34 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:38)
#loc35 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":80:68)
#loc36 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":81:60)
#loc37 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":81:22)
#loc38 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":82:29)
#loc39 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":82:22)
#loc40 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":86:23)
#loc41 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":86:63)
#loc42 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":86:55)
#loc43 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":90:23)
#loc44 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":90:55)
#loc45 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":95:33)
#loc46 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:61)
#loc47 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":119:61)
#loc48 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":103:24)
#loc49 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":104:24)
#loc50 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":96:27)
#loc51 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":97:27)
#loc52 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":95:22)
#loc53 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":116:18)
#loc54 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":117:18)
#loc55 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":118:24)
#loc56 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":119:24)
#loc57 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":113:71)
#loc58 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":121:23)
#loc59 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":124:67)
#loc60 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":124:37)
#loc61 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":125:37)
#loc62 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":126:41)
#loc63 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":126:33)
#loc64 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":126:21)
#loc65 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":126:72)
#loc66 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":126:52)
#loc67 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":127:33)
#loc68 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":127:58)
#loc69 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":127:39)
#loc70 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":128:21)
#loc71 = loc("/home/aweinrau/aiter/aiter/ops/triton/gemm_afp4wfp4.py":128:4)
#loc72 = loc(callsite(#loc13 at #loc14))
#loc73 = loc(callsite(#loc15 at #loc14))
#loc74 = loc(callsite(#loc13 at #loc16))
#loc75 = loc(callsite(#loc15 at #loc16))
#loc76 = loc(callsite(#loc17 at #loc18))
#loc77 = loc(callsite(#loc19 at #loc18))
#loc78 = loc(callsite(#loc20 at #loc18))
#loc79 = loc(callsite(#loc21 at #loc18))
#loc80 = loc(callsite(#loc22 at #loc18))
#loc81 = loc(callsite(#loc23 at #loc18))
#loc82 = loc(callsite(#loc24 at #loc18))
#loc83 = loc(callsite(#loc25 at #loc18))
#loc84 = loc(callsite(#loc26 at #loc18))
#loc85 = loc(callsite(#loc13 at #loc45))
#loc86 = loc(callsite(#loc15 at #loc45))
